From bf96a535a334d1da12f80d8bdb5bb41643dd7f6d Mon Sep 17 00:00:00 2001
From: Franklin S Cooper Jr <fcooper@ti.com>
Date: Tue, 11 Aug 2015 14:52:05 -0500
Subject: [PATCH] Working stuff

---
 __init__.py |  15 --------
 client.py   | 119 ++++++++++++++++++++++++++++++++----------------------------
 errors.py   |  13 -------
 listing.py  |  17 +++------
 page.py     |  15 ++------
 5 files changed, 72 insertions(+), 107 deletions(-)

diff --git a/__init__.py b/__init__.py
index 625b585..bb32dde 100644
--- a/__init__.py
+++ b/__init__.py
@@ -26,18 +26,3 @@
 from errors import *
 from client import Site, __ver__
 import ex
-import logging
-import warnings
-
-# Show DeprecationWarning
-warnings.simplefilter('always', DeprecationWarning)
-
-# Logging: Add a null handler to avoid "No handler found" warnings.
-try:
-    from logging import NullHandler
-except ImportError:
-    class NullHandler(logging.Handler):
-        def emit(self, record):
-            pass
-
-logging.getLogger(__name__).addHandler(NullHandler())
diff --git a/client.py b/client.py
index d4e1266..84d5c0c 100644
--- a/client.py
+++ b/client.py
@@ -13,10 +13,8 @@ except ImportError:
     # Python 2.6
     from ordereddict import OrderedDict
 
-try:
-    import json
-except ImportError:
-    import simplejson as json
+
+import simplejson as json
 import requests
 from requests.auth import HTTPBasicAuth, AuthBase
 
@@ -29,7 +27,7 @@ try:
 except ImportError:
     gzip = None
 
-__ver__ = '0.7.2'
+__ver__ = '0.7.2.dev1'
 
 log = logging.getLogger(__name__)
 
@@ -121,7 +119,7 @@ class Site(object):
 
     def site_init(self):
         meta = self.api('query', meta='siteinfo|userinfo',
-                        siprop='general|namespaces', uiprop='groups|rights', retry_on_error=False)
+                        siprop='general|namespaces', uiprop='groups|rights')
 
         # Extract site info
         self.site = meta['query']['general']
@@ -186,8 +184,8 @@ class Site(object):
         """
         kwargs.update(args)
 
-        if 'continue' not in kwargs:
-            kwargs['continue'] = ''
+        #if 'continue' not in kwargs:
+        #    kwargs['continue'] = ''
         if action == 'query':
             if 'meta' in kwargs:
                 kwargs['meta'] += '|userinfo'
@@ -199,12 +197,12 @@ class Site(object):
                 kwargs['uiprop'] = 'blockinfo|hasmsg'
 
         token = self.wait_token()
-
         while True:
             info = self.raw_api(action, **kwargs)
             if not info:
                 info = {}
-            if self.handle_api_result(info, token=token):
+            res = self.handle_api_result(info, token=token)
+            if res:
                 return info
 
     def handle_api_result(self, info, kwargs=None, token=None):
@@ -219,7 +217,7 @@ class Site(object):
             self.blocked = (userinfo['blockedby'], userinfo.get('blockreason', u''))
         else:
             self.blocked = False
-        self.hasmsg = 'messages' in userinfo
+        self.hasmsg = 'message' in userinfo
         self.logged_in = 'anon' not in userinfo
         if 'error' in info:
             if info['error']['code'] in (u'internal_api_error_DBConnectionError', u'internal_api_error_DBQueryError'):
@@ -239,27 +237,7 @@ class Site(object):
         qs2 = [(k, v) for k, v in kwargs.iteritems() if k in ('wpEditToken', 'token')]
         return OrderedDict(qs1 + qs2)
 
-    def raw_call(self, script, data, files=None, retry_on_error=True):
-        """
-        Perform a generic API call and return the raw text.
-
-        In the event of a network problem, or a HTTP response with status code 5XX,
-        we'll wait and retry the configured number of times before giving up
-        if `retry_on_error` is True.
-
-        `requests.exceptions.HTTPError` is still raised directly for
-        HTTP responses with status codes in the 4XX range, and invalid
-        HTTP responses.
-
-        Args:
-            script (str): Script name, usually 'api'.
-            data (dict): Post data
-            files (dict): Files to upload
-            retry_on_error (bool): Retry on connection error
-
-        Returns:
-            The raw text response.
-        """
+    def raw_call(self, script, data, files=None):
         url = self.path + script + self.ext
         headers = {}
         if self.compress and gzip:
@@ -284,36 +262,49 @@ class Site(object):
                 elif stream.status_code < 500 or stream.status_code > 599:
                     stream.raise_for_status()
                 else:
-                    if not retry_on_error:
-                        stream.raise_for_status()
                     log.warn('Received %s response: %s. Retrying in a moment.', stream.status_code, stream.text)
                     self.wait(token)
 
             except requests.exceptions.ConnectionError:
                 # In the event of a network problem (e.g. DNS failure, refused connection, etc),
                 # Requests will raise a ConnectionError exception.
-                if not retry_on_error:
-                    raise
                 log.warn('Connection error. Retrying in a moment.')
                 self.wait(token)
 
+            except requests.exceptions.HTTPError as e:
+                log.warn('HTTP error: %s', e.message)
+                raise
+
+            except requests.exceptions.TooManyRedirects:
+                raise
+
     def raw_api(self, action, *args, **kwargs):
         """Sends a call to the API."""
-        try:
-            retry_on_error = kwargs.pop('retry_on_error')
-        except KeyError:
-            retry_on_error = True
         kwargs['action'] = action
         kwargs['format'] = 'json'
+	#kwargs['utf8'] = True
         data = self._query_string(*args, **kwargs)
-        res = self.raw_call('api', data, retry_on_error=retry_on_error)
+
+        res = self.raw_call('api', data)
+
+	first = res.find("legaltitlechars")
+	if first is not -1:
+		second = res.find(',"case":"first-letter"',first)
+
+		res = res[:first-2] + res[second:]
+		res = "{\""+res[3:]
+
+	if res.startswith(u'\ufeff'):
+		res = res[1:]
 
         try:
-            return json.loads(res)
+            	return json.loads(res)		
         except ValueError:
             if res.startswith('MediaWiki API is not enabled for this site.'):
                 raise errors.APIDisabledError
-            raise errors.InvalidResponse(res)
+
+            print repr(res)		
+            raise ValueError('Could not decode JSON: %s' % res)
 
     def raw_index(self, action, *args, **kwargs):
         """Sends a call to index.php rather than the API."""
@@ -549,12 +540,34 @@ class Site(object):
 
         wait_token = self.wait_token()
         while True:
-            data = self.raw_call('api', postdata, files)
-            info = json.loads(data)
-            if not info:
-                info = {}
-            if self.handle_api_result(info, kwargs=predata, token=wait_token):
-                return info.get('upload', {})
+            try:
+                data = self.raw_call('api', postdata, files)
+
+
+		# Remove html entity since it causes JSON errors
+		first = data.find('"html":')
+		second = data.find('"canonicaltitle":')
+
+		
+		data = data[:first] + data[second:]
+
+		# Remove ufeff since it causes JSON errors
+		if data.startswith(u'\ufeff'):
+			data = data[1:]
+                info = json.loads(data)
+                if not info:
+                    info = {}
+                if self.handle_api_result(info, kwargs=predata):
+                    return info.get('upload', {})
+            except requests.exceptions.HTTPError as e:
+                if e.args[0] == 503 and e.args[1].getheader('X-Database-Lag'):
+                    self.wait(wait_token, int(e.args[1].getheader('Retry-After')))
+                elif e.args[0] < 500 or e.args[0] > 599:
+                    raise
+                else:
+                    self.wait(wait_token)
+            except requests.exceptions.ConnectionError:
+                self.wait(wait_token)
 
     def parse(self, text=None, title=None, page=None):
         kwargs = {}
@@ -623,6 +636,7 @@ class Site(object):
                                                    rights=rights,
                                                    witheditsonly=witheditsonly,
                                                    activeusers=activeusers))
+        print kwargs
         return listing.List(self, 'allusers', 'au', limit=limit, **kwargs)
 
     def blocks(self, start=None, end=None, dir='older', ids=None, users=None, limit=None,
@@ -684,12 +698,6 @@ class Site(object):
                                                    end=end, dir=dir, user=user, title=title, action=action))
         return listing.List(self, 'logevents', 'le', limit=limit, **kwargs)
 
-    def checkuserlog(self, user=None, target=None, limit=10, dir='older', start=None, end=None):
-
-        kwargs = dict(listing.List.generate_kwargs('cul', target=target, start=start,
-                                                   end=end, dir=dir, user=user))
-        return listing.NestedList('entries', self, 'checkuserlog', 'cul', limit=limit, **kwargs)
-
     # def protectedtitles requires 1.15
     def random(self, namespace, limit=20):
         """Retrieves a generator of random page from a particular namespace.
@@ -762,3 +770,4 @@ class Site(object):
             kwargs['title'] = title
         result = self.raw_api('ask', query=query, **kwargs)
         return result['query']['results']
+
diff --git a/errors.py b/errors.py
index b428fd1..6540c2d 100644
--- a/errors.py
+++ b/errors.py
@@ -56,16 +56,3 @@ class NoSpecifiedEmail(EmailError):
 
 class NoWriteApi(MwClientError):
     pass
-
-
-class InvalidResponse(MwClientError):
-
-    def __init__(self, response_text=None):
-        self.message = 'Did not get a valid JSON response from the server. Check that ' + \
-                       'you used the correct hostname. If you did, the server might ' + \
-                       'be wrongly configured or experience temporary problems.'
-        self.response_text = response_text
-        MwClientError.__init__(self, self.message, response_text)
-
-    def __str__(self):
-        return self.message
diff --git a/listing.py b/listing.py
index 1c83a9e..df7ca3f 100644
--- a/listing.py
+++ b/listing.py
@@ -18,6 +18,8 @@ class List(object):
         if limit is None:
             limit = site.api_limit
         self.args[self.prefix + 'limit'] = text_type(limit)
+        if 'continue' not in self.args:
+            self.args['continue'] = ''
 
         self.count = 0
         self.max_items = max_items
@@ -107,15 +109,6 @@ class List(object):
             return List
 
 
-class NestedList(List):
-    def __init__(self, nested_param, *args, **kwargs):
-        List.__init__(self, *args, **kwargs)
-        self.nested_param = nested_param
-
-    def set_iter(self, data):
-        self._iter = iter(data['query'][self.result_member][self.nested_param])
-
-
 class GeneratorList(List):
 
     def __init__(self, site, list_name, prefix, *args, **kwargs):
@@ -175,12 +168,12 @@ class PageList(GeneratorList):
 
         kwargs = {}
         if prefix:
-            kwargs['gapprefix'] = prefix
+            kwargs['apprefix'] = prefix
         if start:
-            kwargs['gapfrom'] = start
+            kwargs['apfrom'] = start
 
         GeneratorList.__init__(self, site, 'allpages', 'ap',
-                               gapnamespace=text_type(namespace), gapfilterredir=redirects, **kwargs)
+                               apnamespace=text_type(namespace), apfilterredir=redirects, **kwargs)
 
     def __getitem__(self, name):
         return self.get(name, None)
diff --git a/page.py b/page.py
index c0c3aec..a4f2f66 100644
--- a/page.py
+++ b/page.py
@@ -48,10 +48,6 @@ class Page(object):
         self.length = info.get('length')
         self.protection = dict([(i['type'], (i['level'], i['expiry'])) for i in info.get('protection', ()) if i])
         self.redirect = 'redirect' in info
-        self.pageid = info.get('pageid', None)
-        self.contentmodel = info.get('contentmodel', None)
-        self.pagelanguage = info.get('pagelanguage', None)
-        self.restrictiontypes = info.get('restrictiontypes', None)
 
         self.last_rev_time = None
         self.edit_time = None
@@ -109,14 +105,14 @@ class Page(object):
 
     def get_expanded(self):
         """Deprecated. Use page.text(expandtemplates=True) instead"""
-        warnings.warn("page.get_expanded() was deprecated in mwclient 0.7.0 and will be removed in 0.8.0, use page.text(expandtemplates=True) instead.",
+        warnings.warn("page.get_expanded() was deprecated in mwclient 0.7.0, use page.text(expandtemplates=True) instead.",
                       category=DeprecationWarning, stacklevel=2)
 
         return self.text(expandtemplates=True)
 
     def edit(self, *args, **kwargs):
         """Deprecated. Use page.text() instead"""
-        warnings.warn("page.edit() was deprecated in mwclient 0.7.0 and will be removed in 0.8.0, please use page.text() instead.",
+        warnings.warn("page.edit() was deprecated in mwclient 0.7.0, please use page.text() instead.",
                       category=DeprecationWarning, stacklevel=2)
         return self.text(*args, **kwargs)
 
@@ -165,12 +161,7 @@ class Page(object):
         if not self.can('edit'):
             raise errors.ProtectedPageError(self)
 
-        if self.section is not None and section is None:
-            warnings.warn('From mwclient version 0.8.0, the `save()` method will no longer ' +
-                          'implicitly use the `section` parameter from the last `text()` or ' +
-                          '`edit()` call. Please pass the `section` parameter explicitly to ' +
-                          'the save() method to save only a single section.',
-                          category=DeprecationWarning, stacklevel=2)
+        if not section:
             section = self.section
 
         if not self.site.writeapi:
-- 
1.9.1

